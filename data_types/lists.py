'Тип данных - List(списки)==========================='



# List - изменяемый тип данных который представляет с собой колекцию какой-либо последовательности

# list_ =[12, 23, True,  False, [12, 'astr'], 'str', None, [12, []]]'=============================

#index y list 

# list_ = [1, 2, 8, 10]

# print(list_[2]) #8
# print(list_[1::2])#[2, 10]

# list_ = [10, 5, 2, 10, [0,0,0,1,0]]
# print(list_[4][3])

'----------------------------------------------------------------'


# str_ = 'helloworld'
# list_= list(str_) # list()- функция
# print(list_) #['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']


# list_ = [1, 2, 3, 4, 5, 20, True, False, None, 'str']
# lists_len =len(list_) # len() - функция для подчета элементов
# print(lists_len) #10

'===========================Тип данных - Tuple(кортеж)========================'
#tuple - Неизменяемый тип данных ,являющейся последовательностью элементов ,литералами являются запятые и круглые скобки

# tuple_ =(1, 2, 3, 4)#tuple- круглые скобки
# list_ =[1, 2, 3,4]#list- квадратные скобки
# print(tuple_)
# print(list_)

'===========================================Range============================================'

#range(start, end, step) - это генератор последовательности
# в новой версии питона это тип данных

# range_ = range(0, 11)

# print(list(range)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list()
# print(tuple(range)) # (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) tuple()


'=======================================Циклы(for, white)====================================='

#for - это цикл, который работает до конца итерируемого объекта
# white - это цикл, который работает пока условие True


'FOR'

# meshok = ['potato', 'tomato', 'onion']

# kastrula = []

# for ovoshi in meshok: # 1
#     print(ovoshi)
#     kastrula.append(ovoshi)

# print(kastrula)



# for i in range(0,11): #[0,1,2,3,4,5,6,7,8,9,10]
#     print(i**2) # 0,1,4,9,16,25 ...


# for i in 'makers bootcamp':
#     print(f'Это буква - {i}')
'-------------------------------------------------------------------------'

'WHILE'

# i = 0
# while i < 10:
#     print(f'hello world, это {i} итерация')
#     i+=1
'-------------------------------------------------------------------------'
'BREAK, CONTINUE'

#break - это оператор циклов, который ломает цикл и выходит из неё
#continue - это оператор циклов, который пропускает итерацию

# i = 0
# while i < 5:
#     i = i +1
#     if i == 2:
#         continue
#     print(f'hello world, это {i} итерация')

'-------------------------------------------------------------------------'

# for i in range(11):
#     if i == 5:
#         break # ломает цикл и заканчивает его когда i == 5
#     print(f'Это {i} итерация')



# for i in range(11):
#     if i == 5:
#         continue # пропускает итерацию i == 5 и продолжает работу цикла
#     print(f'Это {i} итерация')





'=================================Методы list(списков)=============================='

# print(dir(list)) # dir(list) - функция для просмотров методов листа


'APPEND()'

#list.append(element) - это метод листов, который добавляет указанный элемент в конец листа


# list_ = []

# for i in range(11): # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#     if i % 2 == 0:
#         list_.append(True)
#     else:
#         list_.append(False)

# print(list_) #[True, False, True, False, True, False, True, False, True, False, True]


'-------------------------------------------------------------------------'

# list_ = [1, 2, 3, True, False, 'Rem']

# list_.append('Anton')

# print(list_)

'-------------------------------------------------------------------------'

'EXTEND()'


#list_1.extend(list_2) - это метод листов, который расширяет первый лист засчёт второго листа

# list_1 = [1,2,3]
# list_2 = [4,5,6]

# list_1.append(list_2) # [1,2,3,[4,5,6]] APPEND
# print(len(list_1))

'-------------------------------------------------------------------------'

# list_1 = [1,2,3]
# list_2 = [4,5,6]

# list_1.extend(list_2) # [1,2,3,4,5,6] EXTEND
# print(len(list_1))

'-------------------------------------------------------------------------'

'INSERT()'


#list.insert(index, element) - это метод листов, который на место index добавляет element

# list_ = [0,0,0,0,0,0,0,0,0,0,0]

# list_.insert(5, True)

# print(list_)

'-------------------------------------------------------------------------'

# list_ = [25, 12, 1, 'makers', None, [1, 2, 3, 0, 5, 10]]

# list_[5].insert(5, 'hello')

# print(list_)

'-------------------------------------------------------------------------'

'INDEX()'


# list.index(element, start, end) - это метод листов, который находит индекс указанного элемента

# list_ = ['NYC', 'Moscow', 'SP', 'Bishkek', 'Osh']

# for city in list_:
#     print(f'Город - {city} под индексом {list_.index(city)}')
'-------------------------------------------------------------------------'

'POP()'


#list.pop(index) - это метод листов, который удаляет и возрващает элемент по указанному индексу, если индекс не указать, он удалит последний элемент.


# list_ = [1, 2, 3, 12, 123, 43, 12, 4, 5]

# pop_element = list_.pop(4)

# print(list_)
# print(pop_element)

'-------------------------------------------------------------------------'

# list_ = [1, 2, 3, 12, 123, 43, 12, 4, 5]

# pop_element = list_.pop()

# print(list_)
# print(pop_element)

'-------------------------------------------------------------------------'

'REMOVE()'


#list.remove(element) - это метод листов, для удаления какого-либо элемента, если такого элемента нет, то выйдет ошибка

'-------------------------------------------------------------------------'

# list_ = [1, 2, 3, 4, 5, 6, 7, 'hello']

# list_.remove('hello')

# print(list_)

'-------------------------------------------------------------------------'

'SORT()'


# list.sort(key=len, reverse=True) - это метод листов, для сортировки его элементов

# list_ = ['Sultan', 'Sanjar', 'Aigerim', 'Erkaym']

# list_.sort(key=len, reverse=True) #True

# print(list_)
 
'-------------------------------------------------------------------------'

# list_ = [1, 23, 1, 0, 23, 5, 64]

# list_.sort(reverse=True) #True

# print(list_)
'-------------------------------------------------------------------------'

'COUNT()'


#list.count(element) - это метод листов, который считает сколько elements есть в листе

# list_ = [1, 231, 31, 3, 6, 2, 1, 1, 34, 1, 3, 1, 12, 1, 'hello1', '1', '1', 0]

# count_list = list_.count(1) # 2 раза встречается строка '1' в этом листе

# print(count_list) # 2
'-------------------------------------------------------------------------'

'COPY(), DEEPCOPY()'

#list.copy() - это метод листов, который копирует лист поверхностно
#list.deepcopy() - это метод листов, который копирует лист углублённо


# list_ = [1, 2, 3, 4, 5, [1, 2, 3]]

# copy_list = list_.copy()

# list_[-1].append(0)

# print(list_) [1, 2, 3, 4, 5, [1, 2, 3, 0]]
# print(copy_list) [1, 2, 3, 4, 5, [1, 2, 3, 0]]

'-------------------------------------------------------------------------'

# import copy

# list_1 = [1, 2, 3, 4, 5, [1,2,3]]

# copy_list = copy.deepcopy(list_1)

# list_1[-1].append(0)

# print(list_1) # [1, 2, 3, 4, 5, [1, 2, 3, 0]]
# print(copy_list) # [1, 2, 3, 4, 5, [1, 2, 3]]
'-------------------------------------------------------------------------'

'REVERSE'


#list.reverse() - это метод листов, который переворачивает лист

# list_ = [1,2,3,4,5,6,7,8,9,10]

# list_.reverse()

# print(list_)